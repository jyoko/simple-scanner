/*
 * Wordpress Probe
 *
 * Attempts to enumerate a WordPress installation using 3 methods:
 *
 *   0. Search index response(s) for WP strings
 *   1. Try default WP install files
 *   2. (Optional/TODO) Submit a URL to external checks like WP Theme Detectors
 *
 * Additionally it will note however the server self-identifies.
 *
 * TODO: more sense as event emitter? (would more easily allow pausing, running updates, etc)
 */

const request = require('request');
const uriData = require('./wpuridata');

// spoof as iPhone by default
const defaultUserAgent = 'Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3';

class WPProbe {

  constructor(config={}) {

    this.host        = config.host;
    this.hostName    = config.hostName;
    this.timeout     = config.timeout;
    this.port        = config.port;
    this.userAgent   = config.userAgent || defaultUserAgent;
    this.baseUri     = config.baseUri   || '/'; // needs trailing slash
    this.onComplete  = config.onComplete;
    this.https       = false;
    this.foundWp     = false;
    this.error       = null;
    this.uriIndex    = 0;
    // track multiples if header changes (load balancer or intentional obfuscation)
    this.servers     = [];
    // placeholders for future option wrt probe types
    // TODO: consider aliasing funcs to step object
    this.lastStep    = 1;
    this.currentStep = 0;


    if (typeof this.onComplete !== 'function') {
      throw new Error('WPProbe requires onComplete function');
    }

  }

  // takes optional step to start a different probe method,
  // step order described in file header
  // TODO: ignore/warn if actively scanning?
  start(step) {
    step = step || this.currentStep;

    this.currentStep = step;
    if (step > this.lastStep) {
      this.endProbe();
    }

    switch(step) {
      case 0: return this.checkRoot();
      case 1: return this.checkUris();
    }
  }

  // alias for start(this.currentStep+1)
  nextStep() {
    this.start(this.currentStep+1);
  }

  // TODO: pull these from external list like URIs
  containsWpStrings(str) {
    return /(?:name="generator" content="wordpress)|(?:wp\-\w+)|(?:powered by wordpress)|(?:<!--.+wordpress.+-->)/i.test(str);
  }

  // TODO: less confusing names? (with plural Strings above)
  //       maybe a more reliable check than just "wordpress"?
  containsWpString(str) {
    return /wordpress/i.test(str);
  }

  // add not-empty, not-duplicate servers to list
  addServer(server) {
    if (typeof server !== 'string') return;
    server = str.trim();
    if (server && this.servers.indexOf(server) === -1) {
      this.servers.push(server);
    }
  }

  // convenience wrapper around request.js get call
  // Needs path (empty string is fine for baseUri/server root)
  // and a callback - the callback is executed by request
  makeRequest(path,cb) {
    var uri = (this.https?'https':'http') + '://';
    // request's cert checks seems to fail with resolved host
    uri += this.https?this.hostName:this.host;
    uri += ':'+this.port;
    uri += (this.baseUri+path || '');

    return request({
      uri: uri, 
      timeout: this.timeout,
      headers: {
        'User-Agent': this.userAgent,
      },
    }, cb);
  }

  // step 0, determine if server responds to http/https
  // and see if root response has wordpress markers
  checkRoot() {

    // for makeRequest
    function handleResponse(err, resp, body) {

      if (err) {
        this.error = err;

        // error after upgrade to https, stop probing
        if (this.https) {
          return this.endProbe();
        }

        this.https = true;
        return this.checkRoot();
      }

      this.addServer(resp.headers['server']);

      // Bad Request -> typical of nginx and others for HTTP when expecting HTTPS
      if (resp.statusCode === 400) {
        this.https = true;
        return this.checkRoot();
      }

      this.foundWp = this.containsWpStrings(body);

      if (this.foundWp) {
        this.endProbe();
      } else {
        this.nextStep();
      }
    }

    this.makeRequest('', handleResponse.bind(this));
  }

  // step 1, try other URIs associated with a wordpress instance
  checkUris() {

    // for makeRequest
    function handleResponse(err, resp, body) {
      // squashing errors as they're almost certainly irrelevant
      // unless it's due to a network failure. Maybe useful for
      // advanced fingerprinting?
      if (err) {
        body = '';
        resp = {};
      }

      this.addServer(resp.headers['server']);

      // for license & readme files, looser check
      if (this.uriIndex >= uriData.onlyWpStringIndex) {
        this.foundWp = this.containsWpString(body);
      } else {
        // page should be generated by WP and have markers...
        // TODO: 'maybe' for 200 but no markers (or vice versa)?
        this.foundWp = (resp.statusCode === 200) && this.containsWpStrings(body);
      }

      if (this.foundWp) {
        return this.endProbe();
      }

      this.uriIndex++;
      if (this.uriIndex < uriData.uris.length) {
        this.checkUris();
      } else {
        this.nextStep();
      }
    }

    this.makeRequest(uriData.uris[this.uriIndex], handleResponse.bind(this));
  }

  endProbe() {
    this.onComplete({
      servers: this.servers,
      wordpress: this.foundWp,
      error: this.error,
    });
  }

}

module.exports = WPProbe;
